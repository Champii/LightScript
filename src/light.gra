S: Statement+

Block: !BracketBlock | Statement
BracketBlock: %"\n"? %Spaces %"{" %"\n"? Statement* %Spaces %"}" %"\n"?

Statement: %Spaces %Comment | Class | ControlStruct | TypeAssignation | Expression %Delimiter*
ControlStruct: Cond
Expression: Assignation | Return | !Assignable
Assignable: !Function | Object | Operation | Test | Literal | ComputedProperty | FunctionCall | VariableName
#Call: ComputedProperty | VariableName FunctionCall

Object: %"{}" | !ObjectBlock | !ObjectProperties
ObjectBlock: %"\n"? %Spaces %"{" %"\n"? ObjectPropertyLine* %Spaces %"}" %"\n"?
ObjectProperties: ObjectProperty
ObjectProperty: VariableName %Spaces ":" %Spaces !Assignable !ObjectPropertyComa?
ObjectPropertyComa: %Spaces "," %Spaces !ObjectProperty
ObjectPropertyLine: %Spaces VariableName %Spaces ":" %Spaces !Assignable %Spaces %","? %Spaces %"\n"?

# Magic, do NOT touch
ComputedProperty: Literal | FunctionCall | VariableName LineSpace? !PossibleComputedProperties
PossibleComputedProperties: ComputedPropertiesDots | ComputedPropertiesBraces
ComputedPropertiesBraces: "[" !ComputedPropertiesTypes "]" Call? !PossibleComputedProperties?
ComputedPropertiesDots: %"." NumericComputedProperty | !ComputedPropertiesTypes Call? !PossibleComputedProperties?
ComputedPropertiesTypes: Literal | ComputedProperty | FunctionCall | VariableName
NumericComputedProperty: Number
LineSpace: "\n"+ Spaces

VariableName: !VariableNameIdentifier^Keyword
VariableNameIdentifier: %Letter %Alphanum*
InlineTypeDeclaration: %Spaces ":" %Spaces Type
Assignation: ComputedProperty | VariableName InlineTypeDeclaration? %Spaces %"=" %Spaces !Assignable
TypeAssignation: VariableName %Spaces %":=" %Spaces TypeExpression

TypeExpression: Type !FunctionTypeExpression?
FunctionTypeExpression: %Spaces %"->" %Spaces !TypeExpression
Type: VariableName

Function: FunctionExpression | ArrowFunction
FunctionExpression: FunctionArguments? %Spaces "!"? %"->" !Block
ArrowFunction: FunctionArguments? %Spaces "!"? %"~>" !Block

FunctionArguments: %"(" %Spaces FunctionArgument? %Spaces %")"
FunctionArgument: VariableName InlineTypeDeclaration? !FunctionArgumentComa?
FunctionArgumentComa: %Spaces %"," %Spaces !FunctionArgument

FunctionCall: VariableName !ParensCall | !SpaceCall | !BangCall
Call: !ParensCall | !SpaceCall | !BangCall
ParensCall: %"(" %Spaces CallArg? %Spaces %")"
SpaceCall: %" "+ CallArg
BangCall: %"!"

Keyword: TestOp
CallArg: !Assignable !CallArgComa?
CallArgComa: %Spaces %"," %Spaces !CallArg

Return: "return" %Spaces !Assignable

Comment: %Spaces "#" CommentCharacter*
CommentCharacter: Character | "'"

Loop: %"for" | %"while" %Spaces !TestExpression
Cond: %"if" %Spaces !Assignable %Spaces Block %Spaces Else?
Else: %"else" %Spaces Block

TestExpression: Test
Test: !Operand %Spaces TestOp %Spaces !Operand
TestOp: "isnt" | "is"

Operand: Literal | FunctionCall | VariableName
Operation: !Operand %Spaces Operator %Spaces !Operation | !Operand
Operator: "+" | "-" | "*" | "/"

Keyword: TestOp | "if" | "else" | "for" | "while" | "return" %" "+

Literal: !StringLiteral | !NumericLiteral

NumericLiteral: %Number
StringLiteral: %"'" %Character* %"'"

Spaces: " "*
Delimiter: "\n"

Class: %"class" %Spaces VariableName %Spaces ClassBlock
ClassBlock: %"\n"? %Spaces %"{" %"\n"? ClassStatement* %Spaces %"}" %"\n"?
ClassStatement: %Spaces ClassMethodDeclaration | ClassPropertyDeclaration | %"\n" %Delimiter?
ClassPropertyDeclaration: VariableName InlineTypeDeclaration?
ClassMethodDeclaration: VariableName %Spaces %":" %Spaces ClassMethod
ClassMethod: !Function
